"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nodejs_logging_1 = require("@hmcts/nodejs-logging");
const path = require("path");
const fs = require("fs");
const { merge } = require('lodash');
const log = nodejs_logging_1.Logger.getLogger('applicationRunner');
const defaultOptions = {
    mountPoint: '/mnt/secrets/',
    failOnError: false
};
function addTo(config, givenOptions) {
    const options = merge({}, defaultOptions, givenOptions || {});
    const mountPoint = options.mountPoint;
    const failOnError = options.failOnError;
    log.info(`Attempting to read properties from volume: '${mountPoint}'`);
    try {
        const prefix = getPrefix(mountPoint.toString());
        const properties = readVaults(mountPoint);
        config[prefix] = merge(config[prefix] || {}, properties);
    }
    catch (error) {
        if (failOnError) {
            throw Error(`properties-volume failed with:'${error}`);
        }
        log.info(`Could not read properties from volume: '${mountPoint}' due to '${error}'`);
    }
    return config;
}
exports.addTo = addTo;
function getPrefix(aPath) {
    const prefixFolder = path.basename(aPath);
    if (prefixFolder.length === 0) {
        throw new Error(`Invalid properties mount point supplied: '${aPath}'`);
    }
    return prefixFolder;
}
function addDir(dir, obj, mountPoint) {
    obj[dir] = readDirectories(mountPoint, dir).reduce((values, file) => addFile(values, file, mountPoint, dir), {});
    return obj;
}
function addFile(values, file, mountPoint, dir) {
    values[file] = readFile(mountPoint, dir, file).trim();
    return values;
}
function readFile(mountPoint, dir, file) {
    return fs.readFileSync(mountPoint + '/' + dir + '/' + file, 'utf8');
}
function readDirectories(mountPoint, dir) {
    return fs.readdirSync(mountPoint + '/' + dir);
}
function readVaults(mountPoint) {
    return fs.readdirSync(mountPoint, null).reduce((obj, dir) => addDir(dir, obj, mountPoint), {});
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvcGVydGllcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9Qcm9wZXJ0aWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMERBQThDO0FBQzlDLDZCQUE0QjtBQUM1Qix5QkFBd0I7QUFFeEIsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUVuQyxNQUFNLEdBQUcsR0FBRyx1QkFBTSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO0FBRWpELE1BQU0sY0FBYyxHQUFZO0lBQzlCLFVBQVUsRUFBRSxlQUFlO0lBQzNCLFdBQVcsRUFBRSxLQUFLO0NBQ25CLENBQUE7QUFFRCxlQUF1QixNQUFXLEVBQUUsWUFBc0I7SUFDeEQsTUFBTSxPQUFPLEdBQVksS0FBSyxDQUFDLEVBQUUsRUFBRSxjQUFjLEVBQUUsWUFBWSxJQUFJLEVBQUUsQ0FBQyxDQUFBO0lBQ3RFLE1BQU0sVUFBVSxHQUFnQixPQUFPLENBQUMsVUFBVyxDQUFBO0lBQ25ELE1BQU0sV0FBVyxHQUFZLE9BQU8sQ0FBQyxXQUFZLENBQUE7SUFFakQsR0FBRyxDQUFDLElBQUksQ0FBQywrQ0FBK0MsVUFBVSxHQUFHLENBQUMsQ0FBQTtJQUN0RSxJQUFJO1FBQ0YsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBQy9DLE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUN6QyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUE7S0FDekQ7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUNkLElBQUksV0FBVyxFQUFFO1lBQ2YsTUFBTSxLQUFLLENBQUMsa0NBQWtDLEtBQUssRUFBRSxDQUFDLENBQUE7U0FDdkQ7UUFDRCxHQUFHLENBQUMsSUFBSSxDQUFDLDJDQUEyQyxVQUFVLGFBQWEsS0FBSyxHQUFHLENBQUMsQ0FBQTtLQUNyRjtJQUNELE9BQU8sTUFBTSxDQUFBO0FBQ2YsQ0FBQztBQWpCRCxzQkFpQkM7QUFFRCxtQkFBb0IsS0FBYTtJQUMvQixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3pDLElBQUksWUFBWSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQyw2Q0FBNkMsS0FBSyxHQUFHLENBQUMsQ0FBQTtLQUN2RTtJQUNELE9BQU8sWUFBWSxDQUFBO0FBQ3JCLENBQUM7QUFFRCxnQkFBaUIsR0FBVyxFQUFFLEdBQVEsRUFBRSxVQUF1QjtJQUM3RCxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsZUFBZSxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDaEgsT0FBTyxHQUFHLENBQUE7QUFDWixDQUFDO0FBRUQsaUJBQWtCLE1BQVcsRUFBRSxJQUFZLEVBQUUsVUFBdUIsRUFBRSxHQUFXO0lBQy9FLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUNyRCxPQUFPLE1BQU0sQ0FBQTtBQUNmLENBQUM7QUFFRCxrQkFBbUIsVUFBdUIsRUFBRSxHQUFXLEVBQUUsSUFBWTtJQUNuRSxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsVUFBVSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUNyRSxDQUFDO0FBRUQseUJBQTBCLFVBQXVCLEVBQUUsR0FBVztJQUM1RCxPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsVUFBVSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQTtBQUMvQyxDQUFDO0FBRUQsb0JBQXFCLFVBQXVCO0lBQzFDLE9BQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsVUFBVSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7QUFDaEcsQ0FBQyJ9